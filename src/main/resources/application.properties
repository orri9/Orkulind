
# Configure the View Resolver
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp


# ========================= #
# DATABASE CONNECTION SETUP #
# ========================= #





#########################################################################################################
# NOTICE:                                                                                               #
# IF YOU USE THESE CONNECTION SETTINGS, YOU MUST ADD THE POSTGRESQL DEPENDENCY IN THE POM.XML DOCUMENT  #
#########################################################################################################
# The URL to your database
spring.datasource.url=jdbc:postgresql://ec2-54-228-252-67.eu-west-1.compute.amazonaws.com:5432/d8jmsa3nrrdqi3?sslmode=require

#Database server credentials: 
#Host:	ec2-54-228-252-67.eu-west-1.compute.amazonaws.com
#DB:	d8jmsa3nrrdqi3
#User:	ftycpryfltizpb
#Port:	5432
#Pass:	leyniord

spring.datasource.username=ftycpryfltizpb
spring.datasource.password=leyniord


# What Driver to use
spring.datasource.driver-class-name=org.postgresql.Driver

#Set a limit on the number of database connections, that way two computers can connect to it while 
#not going over the maximum number of connections for Heroku
spring.datasource.tomcat.max-active=3
spring.datasource.tomcat.min-active=0
spring.datasource.tomcat.max-idle=3
spring.datasource.tomcat.min-idle=0
spring.datasource.tomcat.initial-size=5
server.tomcat.max-connections=5
spring.datasource.tomcat.max-wait=20000 


#adding a "bouncer" to watch for dead connections
web: bin/start-pgbouncer-stunnel bundle exec puma -C config/puma.rb

# ============================= #
# DATA JPA - HIBERNATE SETTINGS #
# ============================= #

# To offload the responsibility to create the database tables for our
# entities to the DATA JPA system, we can use the following configuration
spring.jpa.hibernate.ddl-auto=update

# There are 5 possible values we can give this configuration, see below for what each one does
# update      -> update the schema
# create      -> creates the schema, destroying previous data
# create-drop -> creates the schema, drop the schema at the end of the session
# none        -> do nothing
# validate    -> Validate the schema, makes no changes to the database

# NOTE:
# Sometimes in development when rapid changes are made on entities, the database
# tables can become a bit wonky, e.g. you add attributes to entities, change
# data type (e.g. int to Long), etc. If you are having some weird problems you can
# try and set this option to `create` and run the system to force a drop of the schema
# and creation of the schema as it should be.
# ALL THE DATA IN THE DATABASE WILL BE LOST. BACK IT UP IF YOU NEED IT!
# Just remember to revert the option back to `update` or `none` if you want any
# data to be persistent after that.

# Log SQL Statements
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
